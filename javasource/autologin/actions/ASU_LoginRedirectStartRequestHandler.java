// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package autologin.actions;

import java.util.Date;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.externalinterface.connector.RequestHandler;
import com.mendix.logging.ILogNode;
import com.mendix.m2ee.api.IMxRuntimeRequest;
import com.mendix.m2ee.api.IMxRuntimeResponse;
import com.mendix.systemwideinterfaces.core.ISession;
import com.mendix.systemwideinterfaces.core.IUser;
import autologin.proxies.LoginToken;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import javax.servlet.http.HttpServletResponse;
import java.util.HashMap;
import java.util.Map;
import system.proxies.User;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import org.apache.commons.lang3.StringUtils;

/**
 * This Java action is used to add a custom request handler for login redirection. Keep in mind that this Java action uses the "autologin/" request to enable auto login. You must ensure your application and server accept this handler.
 */
public class ASU_LoginRedirectStartRequestHandler extends CustomJavaAction<java.lang.Boolean>
{
	public ASU_LoginRedirectStartRequestHandler(IContext context)
	{
		super(context);
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		try{
			AUTOLOGINLOGGER.info("Starting up ASU_LoginRedirectStartRequestHandler Request Handler");
	        Core.addRequestHandler("autologin/", new AutoLoginHandler());
	        AUTOLOGINLOGGER.info("ASU_LoginRedirectStartRequestHandler Request Handler started");
	        return true;
	    } catch (Exception ex) {
			Core.getLogger("ASU_LoginRedirectStartRequestHandler").info("Exception occurred while processing request "+ex);
			return false;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "ASU_LoginRedirectStartRequestHandler";
	}

	// BEGIN EXTRA CODE
	private static final String XAS_SESSION_ID = "XASSESSIONID";
    private static final String XAS_ID = "XASID";
    private static final String OriginURI = "originURI";
    private static final String OriginURIValue = "index.html";
    protected static ILogNode AUTOLOGINLOGGER = Core.getLogger("ASU_LoginRedirectStartRequestHandler");
    public static final int SECONDS_PER_YEAR = 60 * 60 * 24 * 365;

    class AutoLoginHandler extends RequestHandler {

        @Override
        public void processRequest(IMxRuntimeRequest request, IMxRuntimeResponse response, String arg2)
                throws Exception {
            if ("POST".equals(request.getHttpServletRequest().getMethod())) {
                try {
                    ISession oldSession = this.getSessionFromRequest(request);
                    String loginToken = request.getParameter("loginToken");

                    if (loginToken != null) {
                        // Get a list of LoginToken objects matching the given UUID
                        // Need system context for this, as users can't read the LoginToken object
                        List<LoginToken> LoginTokenList = LoginToken.load(Core.createSystemContext(),
                                "[loginToken='" + loginToken + "']");
                        LoginToken autoLoginRequestProxy;

                        if (LoginTokenList.size() == 1) {
                            // We're good to move forward
                            autoLoginRequestProxy = LoginTokenList.get(0);
                        } else if (LoginTokenList.size() == 0) {
                            throw new Exception("No LoginToken object found.");
                        } else {
                            // More than 1 result -- fail and delete the duplicates
                            for (LoginToken a : LoginTokenList) {
                                a.delete();
                            }
                            throw new Exception("Found duplicate LoginToken objects and deleted them");
                        }
                        if (autoLoginRequestProxy != null) {

                            try {
                                // Check that the autologin request has not expired
                                Date validUntil = autoLoginRequestProxy.getValidUntil();
                                Date date = new Date();
                                if (validUntil.after(date)) {

                                    // Retrieve the associated user from the username stored on the LoginToken object
                                    String userName = autoLoginRequestProxy.getUsername();
                                    //AUTOLOGINLOGGER.info("Username: " + userName + " is the User attempting AutoLogin");
                                    IContext context = Core.createSystemContext();
                                    ISession session = context.getSession();
                                    IUser user = Core.getUser(getContext(), userName); 
                                    if (user == null) {
										AUTOLOGINLOGGER.info("No user found for username: " + userName);
                                        autoLoginRequestProxy.delete();
									} else {
										String cookie = request.getCookie(XAS_SESSION_ID);
								        if (cookie == null || cookie.isEmpty()) {
								            cookie = null;
								        }
								        for (ISession activeSession : Core.getActiveSessions()) {
								            if (activeSession.getId().toString().equals(cookie)) {
								            	AUTOLOGINLOGGER.info("Active session found for user");
								                session = activeSession;
								                break;
								            }
								        }
								        try {
								        	session = Core.initializeSession(user, session != null ? session.getId().toString() : null);
								        	//AUTOLOGINLOGGER.info("Initialized new Mendix session " + session);
					        	        } catch (CoreException e) {
					        	        	AUTOLOGINLOGGER.info("Failed to initialize new Mendix session " + e);
					        	            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
					        	             throw new RuntimeException("Single Sign On unable to create new session");
				        	          	}		
				        	          	response.addCookie(XAS_SESSION_ID, session.getId().toString(), "/", "", -1);
								        response.addCookie(XAS_ID, "0." + Core.getXASId(), "/", "", -1);
								        response.addCookie(OriginURI, OriginURIValue, "/", "", SECONDS_PER_YEAR);	

							        	//AUTOLOGINLOGGER.info("Cookie " + response);	
								        response.setStatus(HttpServletResponse.SC_SEE_OTHER);
        								response.addHeader("location", StringUtils.trim("/index.html"));			        
									}
                                } else {
                                    AUTOLOGINLOGGER.info("The token: " + loginToken
                                            + " was passed, and the LoginToken object was retrieved, but it is expired.");
                                    autoLoginRequestProxy.delete();

                                }
                            } catch (Error e) {
                                response.setStatus(500);
                                AUTOLOGINLOGGER.warn(e.getMessage());
                                autoLoginRequestProxy.delete();
                            }
                        } else {
                            AUTOLOGINLOGGER.info(
                                    "The token: " + loginToken + " was passed, but no LoginToken object was found.");
                        }
                    }
                } catch (Exception e) {
                    response.setStatus(500);
                    AUTOLOGINLOGGER.warn(e.getMessage());
                }
            } else {
                AUTOLOGINLOGGER.info("LoginToken request not of type 'POST'");
                response.setStatus(IMxRuntimeResponse.BAD_REQUEST);
            }
        }
    }
	// END EXTRA CODE
}
